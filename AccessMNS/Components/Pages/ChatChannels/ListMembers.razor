@page "/channel/members/{id:int}&{user:int}"

<MudContainer Class="position-relative p-0" Style="height: 50vh;">
	<MudContainer Class="d-flex justify-content-center">
		<MudTextField T="string" Class="listmembers-searchbar textbar" @bind-Value="searchMember" Placeholder="Rechercher..."
			Variant="Variant.Outlined" Immediate="true" MaxLength="255" OnKeyUp="SearchMember"></MudTextField>
	</MudContainer>

	<MudContainer Class="listmembers-container">
		<MudGrid>
			@foreach (var member in FilterMembers)
			{
				<MudItem xs="12" Class="d-flex pb-5">
					<MudItem xs="2" Class="d-flex">
						<MudAvatar Elevation="2" Class="card-avatar">
							<MudImage Src="flashmemory.png" Alt="Avatar"></MudImage>
						</MudAvatar>
					</MudItem>

					<MudItem xs="7" Class="d-flex align-items-center px-1">
						<MudText Typo="Typo.body2">@member</MudText>
					</MudItem>

					<MudItem xs="3" Class="d-flex justify-content-center">
						<MudTooltip Arrow="true" Delay="200" Placement="Placement.Bottom" Text="Demande d'ami">
							<MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1"></MudIconButton>
						</MudTooltip>

						<MudTooltip Arrow="true" Delay="200" Placement="Placement.Bottom" Text="Envoyer un message privé">
							<MudIconButton Icon="@Icons.Material.Filled.Mail"></MudIconButton>
						</MudTooltip>
					</MudItem>
				</MudItem>
			}
		</MudGrid>
	</MudContainer>
</MudContainer>

@code {
	[Parameter] public int Id { get; set; }
	[Parameter] public int User { get; set; }

	private string searchMember = "";

	// Simulation des données
	private List<string> ChannelMembers = new List<string> { "Karl MacGiver", "Truc Bidule", "Chouette Patapouf", "Mickle Jordan", "Pasde Soleil", "Marrede Lapluie" };
	private List<string> FilterMembers = new List<string>();

	protected override async Task OnInitializedAsync()
	{
		// Récupération des Membres du Channel...
		LoadMembersIntoFilter();
	}

	private void LoadMembersIntoFilter()
	{
		FilterMembers = ChannelMembers;
	}

	public void SearchMember()
	{
		FilterMembers = ChannelMembers.Where(t => t.Contains(searchMember, StringComparison.OrdinalIgnoreCase)).ToList();

		if (string.IsNullOrEmpty(searchMember))
		{
			LoadMembersIntoFilter();
		}
	}
}
